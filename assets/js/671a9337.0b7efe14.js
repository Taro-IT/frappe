"use strict";(self.webpackChunkfrappe=self.webpackChunkfrappe||[]).push([[736],{3905:(e,a,r)=>{r.d(a,{Zo:()=>l,kt:()=>m});var t=r(7294);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function o(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?o(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function c(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=t.createContext({}),d=function(e){var a=t.useContext(s),r=a;return e&&(r="function"==typeof e?e(a):i(i({},a),e)),r},l=function(e){var a=d(e.components);return t.createElement(s.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=d(r),m=n,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return r?t.createElement(f,i(i({ref:a},l),{},{components:r})):t.createElement(f,i({ref:a},l))}));function m(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=u;var c={};for(var s in a)hasOwnProperty.call(a,s)&&(c[s]=a[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var d=2;d<o;d++)i[d]=r[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6090:(e,a,r)=>{r.r(a),r.d(a,{frontMatter:()=>c,contentTitle:()=>s,metadata:()=>d,toc:()=>l,default:()=>u});var t=r(7462),n=r(3366),o=(r(7294),r(3905)),i=["components"],c={name:"Estructura de Archivos",sidebar_position:2},s="Estructura de archivos",d={unversionedId:"architecture/file-structure",id:"architecture/file-structure",isDocsHomePage:!1,title:"Estructura de archivos",description:"La estructura de Frapp\xe9 es un mono repositorio donde se manejan tanto frontend como backend en el mismo lugar, pero como aplicaciones separadas.",source:"@site/docs/architecture/file-structure.md",sourceDirName:"architecture",slug:"/architecture/file-structure",permalink:"/frappe/architecture/file-structure",editUrl:"https://github.com/Taro-IT/frappe/edit/main/apps/docs/docs/architecture/file-structure.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{name:"Estructura de Archivos",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Stack de tecnolog\xedas",permalink:"/frappe/architecture/technology-stack"},next:{title:"Ambiente Local",permalink:"/frappe/architecture/setup/environment-setup"}},l=[{value:"Apps",id:"apps",children:[{value:"Backoffice",id:"backoffice",children:[]},{value:"API Gateway",id:"api-gateway",children:[]}]},{value:"Libs",id:"libs",children:[{value:"Domain",id:"domain",children:[]},{value:"Application",id:"application",children:[]}]}],p={toc:l};function u(e){var a=e.components,r=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},p,r,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"estructura-de-archivos"},"Estructura de archivos"),(0,o.kt)("p",null,"La estructura de Frapp\xe9 es un mono repositorio donde se manejan tanto frontend como backend en el mismo lugar, pero como aplicaciones separadas."),(0,o.kt)("p",null,"El repositorio est\xe1 dividido en dos secciones principales: ",(0,o.kt)("inlineCode",{parentName:"p"},"apps")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"libs"),". La estructura del mono repositorio es la siguiente:"),(0,o.kt)("h2",{id:"apps"},"Apps"),(0,o.kt)("p",null,"En este folder se encuentran todas las aplicaciones que utiliza el sistema de frapp\xe9. Es decir, backoffice, api-gateway y docs."),(0,o.kt)("h3",{id:"backoffice"},"Backoffice"),(0,o.kt)("p",null,"Es el frontend de la aplicaci\xf3n correspondiente al \xe1rea administrativa de C\xednica. En esta aplicaci\xf3n, se podr\xe1n crear, eliminar, actualizar y leer categor\xedas, productos, \xf3rdenes de compra, etc."),(0,o.kt)("p",null,"Es una aplicaci\xf3n de React que utiliza el framework Next.js. Por esta raz\xf3n, todas las rutas de la aplicaci\xf3n se definen en el folder pages, ya que Next nos brinda la posibilidad de tener rutas din\xe1micas."),(0,o.kt)("h3",{id:"api-gateway"},"API Gateway"),(0,o.kt)("p",null,"Es una api escrita en Express y corre en un servidor. Regresa contenido JSON. Es la aplicaci\xf3n correspondiente a utilizar las librer\xedas definidas en el folder libs, para modificar y recuperar data proveniente de la base de datos."),(0,o.kt)("h2",{id:"libs"},"Libs"),(0,o.kt)("p",null,"Este folder contiene todas las librer\xedas que se utilizan en la secci\xf3n de apps. Dentro del proyecto, estamos usando un acercamiento a la arquitectura llamado Domain Driven Design (DDD)."),(0,o.kt)("p",null,"Este acercamiento establece, por cada modelo (por ejemplo, category, product, order, etc), 3 capas principales: application, domain e infrastructure o persistance."),(0,o.kt)("h3",{id:"domain"},"Domain"),(0,o.kt)("p",null,"En esta capa se definen todos los modelos de datos que se van a usar en la aplicaci\xf3n. Por ejemplo, si queremos definir la estructura de un producto, definir\xedamos un modelo denominado Product."),(0,o.kt)("h3",{id:"application"},"Application"),(0,o.kt)("p",null,"En esta capa se define la l\xf3gica correspondiente a cada caso de uso. Dependiendo del contexto (Product, Category, Order, etc), tendremos varios casos de uso en la capa de application. Se deber\xe1 crear un folder por cada caso de uso."),(0,o.kt)("p",null,"Por cada caso de uso, se deben crear 3 archivos (adicionales al ",(0,o.kt)("inlineCode",{parentName:"p"},"index.ts"),"):\nEl caso de uso en s\xed (",(0,o.kt)("inlineCode",{parentName:"p"},"ProductCreator"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"CategoryUpdater"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"OrderDeleter"),", etc)\nEl Command Handler (",(0,o.kt)("inlineCode",{parentName:"p"},"CreateProductCommandHandler"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"UpdateCategoryCommandHandler"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"DeleteOrderCommandHandler"),", etc)\nEl Command (",(0,o.kt)("inlineCode",{parentName:"p"},"CreateProductCommand"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"UpdateCategoryCommand"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"DeleteOrderCommand"),", etc)\nPor ejemplo, la estructura dentro de la librer\xeda Product, se ver\xeda de la siguiente manera:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"product\n\u251c\u2500\u2500 application\n\u2502   \u2514\u2500\u2500 src\n\u2502       \u251c\u2500\u2500 create\n\u2502       \u251c\u2500\u2500 update\n\u2502       \u2502   \u251c\u2500\u2500 name\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 index.ts\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 UpdateProductNameCommandHandler.ts\n\u2502       \u2502   \u2502   \u251c\u2500\u2500 UpdateProductNameCommand.ts\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 ProductCreator.ts\n\u2502       \u2502   \u251c\u2500\u2500 price\n\u2502       \u2502   \u251c\u2500\u2500 color\n\u2502       \u2502   \u2514\u2500\u2500 index.ts\n\u2502       \u2514\u2500\u2500 index.ts\n\u251c\u2500\u2500 domain\n\u2514\u2500\u2500 persistance\n")))}u.isMDXComponent=!0}}]);