"use strict";(self.webpackChunkfrappe=self.webpackChunkfrappe||[]).push([[6],{3905:(e,a,r)=>{r.d(a,{Zo:()=>p,kt:()=>m});var t=r(7294);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function o(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?o(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function l(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=t.createContext({}),d=function(e){var a=t.useContext(i),r=a;return e&&(r="function"==typeof e?e(a):s(s({},a),e)),r},p=function(e){var a=d(e.components);return t.createElement(i.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},c=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(r),m=n,g=c["".concat(i,".").concat(m)]||c[m]||u[m]||o;return r?t.createElement(g,s(s({ref:a},p),{},{components:r})):t.createElement(g,s({ref:a},p))}));function m(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=c;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,s[1]=l;for(var d=2;d<o;d++)s[d]=r[d];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}c.displayName="MDXCreateElement"},1367:(e,a,r)=>{r.r(a),r.d(a,{frontMatter:()=>l,contentTitle:()=>i,metadata:()=>d,toc:()=>p,default:()=>c});var t=r(7462),n=r(3366),o=(r(7294),r(3905)),s=["components"],l={},i="PP-G03 - Gu\xeda para hacer el API Gateway de backend",d={unversionedId:"guides/PPG04-guia-gateway",id:"guides/PPG04-guia-gateway",isDocsHomePage:!1,title:"PP-G03 - Gu\xeda para hacer el API Gateway de backend",description:"Objetivo(s)",source:"@site/docs/guides/PPG04-guia-gateway.md",sourceDirName:"guides",slug:"/guides/PPG04-guia-gateway",permalink:"/frappe/guides/PPG04-guia-gateway",editUrl:"https://github.com/Taro-IT/frappe/edit/main/apps/docs/docs/guides/PPG04-guia-gateway.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"G03 - Gu\xeda para adquirir conocimiento t\xe9cnico",permalink:"/frappe/guides/PPG03-Guia-adquirir-conocimiento"},next:{title:"PPG05 - Gu\xeda de deployment Frapp\xe9",permalink:"/frappe/guides/PPG05-guia-deployment"}},p=[{value:"Objetivo(s)",id:"objetivos",children:[],level:2},{value:"Pre-requisitos",id:"pre-requisitos",children:[],level:2},{value:"Pasos a seguir",id:"pasos-a-seguir",children:[{value:"Handlers",id:"handlers",children:[],level:3},{value:"DTOs (Data Transfer Objects)",id:"dtos-data-transfer-objects",children:[],level:3},{value:"Routing",id:"routing",children:[],level:3},{value:"Registrar handlers y m\xf3dulo de routas",id:"registrar-handlers-y-m\xf3dulo-de-routas",children:[],level:3}],level:2},{value:"Salidas",id:"salidas",children:[],level:2},{value:"Autores",id:"autores",children:[],level:2},{value:"Auditor\xeda",id:"auditor\xeda",children:[],level:2},{value:"Versi\xf3n 1.0",id:"versi\xf3n-10",children:[],level:2}],u={toc:p};function c(e){var a=e.components,r=(0,n.Z)(e,s);return(0,o.kt)("wrapper",(0,t.Z)({},u,r,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pp-g03---gu\xeda-para-hacer-el-api-gateway-de-backend"},"PP-G03 - Gu\xeda para hacer el API Gateway de backend"),(0,o.kt)("h2",{id:"objetivos"},"Objetivo(s)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Orientar en la forma en que se hacen los API Gateway para un caso de uso en el repositorio")),(0,o.kt)("h2",{id:"pre-requisitos"},"Pre-requisitos"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Haber creado las libs correctamente, siguiendo la ","[Gu\xeda para hacer librer\xedas de backend]"),(0,o.kt)("li",{parentName:"ul"},"Haber leido ",(0,o.kt)("a",{parentName:"li",href:"../architecture/file-structure"},"la estructura de archivos"))),(0,o.kt)("h2",{id:"pasos-a-seguir"},"Pasos a seguir"),(0,o.kt)("h3",{id:"handlers"},"Handlers"),(0,o.kt)("p",null,"  :::note\nPara fines ilustrativos, en esta gu\xeda se usar\xe1n ejemplos del caso CreateCategory\n:::"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Dentro de la carpeta ",(0,o.kt)("inlineCode",{parentName:"li"},"apps/api-gateway/src")," crea una carpeta para tu caso de uso el nombre del m\xf3dulo. (category, product, etc)"),(0,o.kt)("li",{parentName:"ol"},"Dentro de la carpeta que acabas de crear, haz una nueva con el nombre ",(0,o.kt)("inlineCode",{parentName:"li"},"handlers"),", donde guardar\xe1s todos los manejadores para cada caso de uso, como crear, actualizar o eliminar."),(0,o.kt)("li",{parentName:"ol"},"Crea un archivo para tu handler con el nombre ",(0,o.kt)("inlineCode",{parentName:"li"},"<accion><Caso>Handler.ts"),", por ejemplo ",(0,o.kt)("inlineCode",{parentName:"li"},"createCategoryHandler.ts"),", el cu\xe1l tendr\xe1 algo similar al c\xf3digo siguiente:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"    import { CommandBus } from '@tshio/command-bus';\n    import { NextFunction, RequestHandler } from 'express';\n    // Importa el Comando que creaste en las librerias en la capa de aplicaci\xf3n\n    import { CreateCategoryCommand } from '@frappe/category/application';\n    import { Uuid } from '@frappe/common/value-object';\n\n    export const createCategoryHandler =\n      (commandBus: CommandBus): RequestHandler =>\n      async (req, res, next: NextFunction) => {\n\n        // Para los casos de crear, define el id en este punto\n        const id = Uuid.create().value;\n\n        try {\n          // Ocupas el commandBus para ejecutar el comando create, \n          // el cu\xe1l recibe una categor\xeda que est\xe1 conformada por \n          //el id que creaste en la l\xednea anterior y el name\n          // que viene del HTTP request.\n          await commandBus.execute(new CreateCategoryCommand({ id, name: req.body.name }));\n\n          // Cuando la llamada fue exitosa, regresas una respuesta HTTP con estatus 201 y env\xedas el id de la categor\xeda creada con formato json.\n          res.status(201).json({ id });\n        } catch (error) {\n          next(error);\n        }\n      };\n")),(0,o.kt)("p",null,"  Recuerda que puedes ver c\xf3mo se hicieron los casos de otros m\xf3dulos para basarte, ya que hay boilerplate y a final de cuentas, es el mismo proceso para todos."),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Dentro de la misma carpeta ",(0,o.kt)("inlineCode",{parentName:"li"},"handlers")," crea un archivo ",(0,o.kt)("inlineCode",{parentName:"li"},"index.ts")," y exporta tus handlers de la siguiente manera:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"  export { createCategoryHandler } from './createCategoryHandler';\n")))),(0,o.kt)("h3",{id:"dtos-data-transfer-objects"},"DTOs (Data Transfer Objects)"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Al nivel de tu caso de uso, crea la carpeta dto, donde alojaras todos los archivos de ese tipo, y crea un archivo ",(0,o.kt)("inlineCode",{parentName:"p"},"index.ts"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Crea un archivo para cada dto, un ejemplo de nombre es ",(0,o.kt)("inlineCode",{parentName:"p"},"CreateCategory.dto.ts")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"UpdateCategory.dto.ts"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Dentro de tu dto deber\xe1s incluir todos los campos que recibes en los request de la API y validarlos con decoradores (class-validators). Puedes ver la lista de decoradores disponibles ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/typestack/class-validator"},"aqu\xed"),"."),(0,o.kt)("p",{parentName:"li"},"Un ejemplo de archivo de dto puede ser"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"  // Importas el validador que necesitas\n  import { IsNotEmpty } from 'class-validator';\n\n  export class CreateCategoryDto {\n    // Declaras el tipo y su validaci\xf3n\n    @IsNotEmpty()\n    // TODOS los campos deben ser readonly\n    readonly name: string;\n  }\n\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"En el archivo ",(0,o.kt)("inlineCode",{parentName:"p"},"index.ts")," exporta tus dto as\xed"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export { CreateCategoryDto } from './CreateCategory.dto';\n\n")))),(0,o.kt)("h3",{id:"routing"},"Routing"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"En el nivel root de caso de uso, crea un archivo que se llame ",(0,o.kt)("inlineCode",{parentName:"li"},"<modulo>.routing.ts"),", en el cual vas a registrar todas las rutas con sus m\xe9todos HTTP, adem\xe1s de los dtos que validar\xe1n dichas rutas. En Frapp\xe9 usamos el est\xe1ndar que puedes encontrar ",(0,o.kt)("a",{parentName:"li",href:"https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/#h-use-nouns-instead-of-verbs-in-endpoint-paths"},"aqu\xed"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import express from 'express';\nimport { CommandBus } from '@tshio/command-bus';\nimport { makeValidateBody } from 'express-class-validator';\n// Importa los dtos\nimport * as dtos from './dto';\n// Importa los handlers que creaste\nimport * as handlers from './handlers';\n\n// Estas son las dependencias del routing, el CommandBus para comandos\n// y el QueryBus para cosultas\ninterface CollectionRoutingDeps {\n  readonly commandBus: CommandBus;\n}\n\nexport const categoryRouting = ({ commandBus }: CollectionRoutingDeps) => {\n  const router = express.Router();\n\n  //La sintaxis para rutas es\n  // router.<HTTP-Request>('/ruta', makeValidateBody(dtos.<Nombre-dto>), handlers.<nombre-handler>(<bus>));\n\n  // Habr\xe1 casos donde no necesites dtos, por ello este par\xe1metro es opcional.\n\n  // Una ruta de creaci\xf3n se ve as\xed\n  router.post('/', makeValidateBody(dtos.CreateCategoryDto), handlers.createCategoryHandler(commandBus));\n\n  // M\xe1s ejemplos de rutas\n  router.patch('/:id', makeValidateBody(dtos.UpdateCategoryDto), handlers.updateCategoryHandler(commandBus));\n  router.get('/', handlers.listCategoryHandler(queryBus));\n  router.delete('/:id', handlers.deleteCategoryHandler(commandBus));\n\n  // regresas el router\n  return router;\n};\n\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"En el nivel root de caso de uso, crea un archivo que se llame ",(0,o.kt)("inlineCode",{parentName:"li"},"index.ts"),", en el cual vas a registrar todos tus executers, es decir, los creators, finders, listers, que hayas creado en las libs. Un ejemplo de este archivo puede ser:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { AwilixContainer, asClass, asFunction } from 'awilix';\n// Importa el archivo de rutas que creaste en el paso anterior\nimport { categoryRouting } from './category.routing';\n// Importa el repositorio que creaste en las libs\nimport { MongoCategoryRepository } from '@frappe/category/persistence/mongodb';\n\n// Importa los creators, finders, updaters, etc.\nimport {\n  CategoryCreator,\n} from '@frappe/category/application';\n\n// Esta funci\xf3n se llamar\xe1 register<Caso>Module, recuerda este nombre porque lo usaremos en la siguiente secci\xf3n\nexport const registerCategoryModule = (container: AwilixContainer) => {\n  container.register({\n    // Registra el creator y repite este paso para cada executer\n    categoryRepository: asClass(MongoCategoryRepository).singleton(),\n\n    // Registra el router que creaste en el paso anterior como una funci\xf3n\n    categoryRouting: asFunction(categoryRouting).singleton()\n  });\n};\n\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Dentro de la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," dirigete a la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"routes")," y abre el ",(0,o.kt)("inlineCode",{parentName:"p"},"index.ts"),'. En este archivo registrar\xe1s el nombre de la ruta que usar\xe1s para tu caso de uso, es decir, si quieres que sea algo como "cinica.mx/categories".\nSiguiendo ese ejemplo, debes crear tu ruta de esta manera:'),(0,o.kt)("p",{parentName:"li"},"Primero define el categoryRouting en la interfaz ",(0,o.kt)("inlineCode",{parentName:"p"},"RoutesDeps")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"  interface RoutesDeps {\n  // este nombre debe ser igual al del router que creaste en el paso 1\n  readonly categoryRouting: express.Router;\n  ...\n}\n")),(0,o.kt)("p",{parentName:"li"},"Despu\xe9s nombra tu ruta en el m\xe9todo configureRouter"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"  router.use('/categories', routes.categoryRouting);\n")))),(0,o.kt)("h3",{id:"registrar-handlers-y-m\xf3dulo-de-routas"},"Registrar handlers y m\xf3dulo de routas"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Al nivel de ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," encuentra la carpeta ",(0,o.kt)("inlineCode",{parentName:"p"},"container")," y abre el archivo ",(0,o.kt)("inlineCode",{parentName:"p"},"commandHandlers.ts"),", en el cu\xe1l registrar\xe1s los handlers que hayas creado en las librer\xedas. "),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Recuerda que en commands van los comandos, y en queries, van los queries")),(0,o.kt)("p",{parentName:"li"},"Despu\xe9s de importarlo, solo debes agregar la siguiente l\xednea despu\xe9s del \xfaltimo."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"  asClass(CreateCategoryCommandHandler),\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Ahora abre el archivo ",(0,o.kt)("inlineCode",{parentName:"p"},"index.ts")," e importa el m\xf3dulo de rutas que definiste en la fase de routing, en el paso 2, por ejemplo:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { registerCategoryModule } from '../category';\n\n")),(0,o.kt)("p",{parentName:"li"},"Despu\xe9s solo ll\xe1malo debajo del comentario en la l\xednea 28, as\xed"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"  // Register Modules\n  registerCategoryModule(container);\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Listo, ya puedes probar tu endpoint con Postman o llamarlo desde el front-end"))),(0,o.kt)("h2",{id:"salidas"},"Salidas"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Uno o m\xe1s endpoints de API listo para probarse con Postman o Imsomnia")),(0,o.kt)("h2",{id:"autores"},"Autores"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Karla Daniela Romero P\xe9rez")),(0,o.kt)("h2",{id:"auditor\xeda"},"Auditor\xeda"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Vladimir Salvador"),(0,o.kt)("li",{parentName:"ul"},"Mauricio \xc1lvarez Mil\xe1n")),(0,o.kt)("h2",{id:"versi\xf3n-10"},"Versi\xf3n 1.0"),(0,o.kt)("p",null,"Se cre\xf3 la gu\xeda"))}c.isMDXComponent=!0}}]);